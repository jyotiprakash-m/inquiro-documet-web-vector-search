// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Document {
  id              String         @id @default(cuid())
  title           String
  description     String?
  fileUrl         String
  fileType        String
  fileSize        Int
  userId          String
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  vectors         Vector[]
  batchResourceId String?
  batchResource   BatchResource? @relation(fields: [batchResourceId], references: [id], onDelete: Cascade)
  Chat            Chat[]
}

model Vector {
  id         String    @id @default(cuid())
  content    String
  embedding  Float[]
  documentId String?
  document   Document? @relation(fields: [documentId], references: [id], onDelete: Cascade)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  WebPage    WebPage?  @relation(fields: [webPageId], references: [id], onDelete: Cascade)
  webPageId  String?

  @@index([documentId])
  @@index([webPageId])
}

model WebPage {
  id              String         @id @default(cuid())
  url             String
  title           String
  description     String?
  userId          String
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  vectors         Vector[]
  batchResourceId String?
  batchResource   BatchResource? @relation(fields: [batchResourceId], references: [id], onDelete: Cascade)
  Chat            Chat[]
}

model BatchResource {
  id          String     @id @default(cuid())
  name        String
  description String?
  userId      String
  type        String // e.g., 'document', 'url', 'both'
  totalFiles  Int
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  webPages    WebPage[]
  documents   Document[]
  Chat        Chat[]
}

model Chat {
  id              String         @id @default(uuid())
  batchResourceId String?
  batchResource   BatchResource? @relation(fields: [batchResourceId], references: [id], onDelete: Cascade)
  documentId      String?
  document        Document?      @relation(fields: [documentId], references: [id], onDelete: Cascade)
  webPageId       String?
  webPage         WebPage?       @relation(fields: [webPageId], references: [id], onDelete: Cascade)
  userId          String
  title           String
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  Message         Message[]
}

model Message {
  id        String   @id @default(uuid())
  chatId    String
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  content   String
  role      String // e.g., 'user', 'assistant'
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([chatId])
}
